#include <iostream>
#include <queue>
using namespace std;

struct Node{
    int data;
    int leftIndex;
    int rightIndex;
};

class BinaryTree{
    vector<Node> bt;
    public:
    void makeNode(int data);
    void insertLeft(int index,int data);
    void insertRight(int index,int data);
    void insert(int data);
    void traverse(int index,int order);
    int height(int index);
};

void BinaryTree::makeNode(int data){
    struct Node b = {data,-1,-1};
    bt.push_back(b);
}

void BinaryTree::insertLeft(int index,int data){
    struct Node b = {data,-1,-1};
    bt[index].leftIndex = bt.size();
    bt.push_back(b);
}

void BinaryTree::insertRight(int index,int data){
    struct Node b = {data,-1,-1};
    bt[index].rightIndex =bt.size();
    bt.push_back(b);
}

void BinaryTree::insert(int data){
    if(bt.size() == 0){
        makeNode(data);
    }else{
        int index = 0;
        while(index<bt.size()){
            if(data<=bt[index].data){
                if(bt[index].leftIndex == -1){
                    insertLeft(index,data);
                    break;
                }else{
                    index=bt[index].leftIndex;
                }
            }else{
                if(bt[index].rightIndex == -1){
                    insertRight(index,data);
                    break;
                }else{
                    index = bt[index].rightIndex;
                }
            }
        }
    }
}

void BinaryTree::traverse(int index,int order){
    if(order == -1)
    cout<<bt[index].data<<" ";
    
    if(bt[index].leftIndex!=-1)
    traverse(bt[index].leftIndex,order);
    
    if(order == 0)
    cout<<bt[index].data<<" ";
    
    if(bt[index].rightIndex!=-1)
    traverse(bt[index].rightIndex,order);
    
    if(order == 1)
    cout<<bt[index].data<<" ";
    
    
}

int BinaryTree::height(int index){
    
    if(bt[index].leftIndex == -1 && bt[index].rightIndex == -1)
        return 0;
    
    int left_subtree_height = 0;

    if(bt[index].leftIndex != -1)
        left_subtree_height = height(bt[index].leftIndex);

    int right_subtree_height = 0;

    if(bt[index].rightIndex != -1)
        right_subtree_height = height(bt[index].rightIndex);

    if(left_subtree_height > right_subtree_height)
        return 1 + left_subtree_height;
        else
        return 1 + right_subtree_height;
}

int main()
{
    cout<<"Hello World"<<endl;
    BinaryTree b1;
    b1.insert(60);
    b1.insert(40);
    b1.insert(20);
    b1.insert(25);
    b1.insert(90);
    b1.insert(23);
    b1.insert(95);
    b1.insert(80);
    b1.insert(85);
    
    cout << "Pre-Order\n";
    b1.traverse(0,-1);

    cout << "\n\nIn-Order\n";
    b1.traverse(0,0);

    cout << "\n\nPost-Order\n";
    b1.traverse(0,1);

    cout<<b1.height(0)<<endl;
   
    return 0;
}

